-# Copyright Â© 2011-2020 MUSC Foundation for Research Development~
-# All rights reserved.~

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:~

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.~

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following~
-# disclaimer in the documentation and/or other materials provided with the distribution.~

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products~
-# derived from this software without specific prior written permission.~

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,~
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT~
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL~
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS~
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR~
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.~

- billing_manager = current_identity.billing_manager_protocols.include?(procedure.protocol)

%tr.procedure{data: { id: procedure.id, service_id: procedure.service_id, billing_type: procedure.billing_type, group_id: procedure.group_id, disabled: procedure.invoiced? ? 'true' : 'false' } }
  %td.col-sm-3.name{class: "#{procedure.invoiced? ? 'disabled-status' : ''}"}
    = service_name_display(procedure.service)

  %td.col-sm-1.billing
    = select_tag "quantity_type_#{procedure.id}", options_for_select(Procedure.billing_display, procedure.billing_type), class: procedure.invoiced? ? "form-control billing_type selectpicker disable-select-box invoiced_disabled " : "form-control billing_type selectpicker", disabled: procedure.invoiced?

  %td.col-sm-3.status
    .btn-group{data: {toggle: "buttons"}, class: "#{ procedure.appt_started? ? '' : 'pre_start_disabled' } #{procedure.invoiced? ? 'disabled-status' : ''}"}
      %label.status.complete{class: "btn btn-default #{procedure.complete? ? 'selected_before active' : 'inactive'} #{ !procedure.appt_started? ? 'disabled' : procedure.invoiced? ? 'disabled' : '' }", data: {core_id: "#{procedure.sparc_core_id}"}}
        %input{class: "procedure_status", type: "radio", value: "complete", autocomplete: "off", id: "complete_button_#{procedure.id}", disabled: procedure.invoiced?, readonly: procedure.invoiced?} Complete
      %label.status.incomplete{class: "btn btn-default #{procedure.incomplete? ? 'active': ''} #{ !procedure.appt_started? ? 'disabled' : procedure.invoiced? ? 'disabled' : '' }"}
        %input{class: "procedure_status", type: "radio", value: "incomplete", autocomplete: "off", id: "incomplete_button_#{procedure.id}", disabled: procedure.invoiced?, readonly: procedure.invoiced?} Incomplete

  %td.col-sm-1.followup{id: "follow_up_#{procedure.id}"}
    = render partial: "/appointments/followup_calendar", locals: { procedure: procedure }

  %td.col-sm-1.completed-date
    .input-group.date{class: procedure.invoiced? ? "invoiced_disabled" : ""}
      %input.datetimepicker{type: "text", class: "form-control completed_date_field", disabled: !(procedure.appt_started? && procedure.complete?) || procedure.invoiced?, value: format_date(procedure.completed_date), readonly: true}

  %td.col-sm-1.performed-by
    = select_tag "performed-by-#{procedure.id}", options_for_select(procedure.performable_by, procedure.performer_id), include_blank: "N/A", class: procedure.invoiced? ? "performed-by-dropdown selectpicker disable-select-box invoiced_disabled" : "performed-by-dropdown selectpicker", data: { width: '125px' }, 'showIcon' => false, disabled: procedure.invoiced?

  %td.col-sm-1.notes
    = procedure_notes_formatter(procedure)

  - if billing_manager
    %td.col-sm-1.invoiced_toggle
      = check_box_tag :invoiced_procedure, '', procedure.invoiced?, class: 'toggle_invoice_procedure', disabled: !procedure.complete? || procedure.invoiced? || procedure.credited?, data: { toggle: 'toggle', id: procedure.id, on: 'Yes', off: 'No' }
  - else
    %td.col-sm-1.invoiced_view_only
      = (procedure.invoiced? ? "Yes" : "No")

  - if billing_manager && current_identity.billing_manager_protocols_allow_credit.include?(procedure.protocol)
    %td.col-sm-1.credited_toggle
      = check_box_tag :credited_procedure, '', procedure.credited?, class: 'toggle_credit_procedure', disabled: !procedure.complete? || procedure.invoiced? || procedure.credited?, data: { toggle: 'toggle', id: procedure.id, on: 'Yes', off: 'No' }
  - else
    %td.col-sm-1.credited_view_only
      = (procedure.credited? ? "Yes" : "No")

  %td.col-sm-1.actions
    %div{class: (@appointment_style == "custom" ? 'large_actions_container' : '')}
      - if @appointment_style == "custom"
        = position_options_button(procedure)
      %button.btn.btn-danger.delete{type: "button", disabled: procedure.invoiced? || procedure.credited?, aria: {label: "Remove Procedure"}}
        %span.glyphicon.glyphicon-remove.disabled_tooltip{aria: {hidden: "true"}, title: procedure.invoiced? ? t(:appointment)[:procedure_disabled_invoiced] : procedure.credited? ? t(:appointment)[:procedure_disabled_credited] : ''}
