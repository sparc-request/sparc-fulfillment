-# Copyright Â© 2011-2023 MUSC Foundation for Research Development~
-# All rights reserved.~

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:~

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.~

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following~
-# disclaimer in the documentation and/or other materials provided with the distribution.~

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products~
-# derived from this software without specific prior written permission.~

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,~
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT~
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL~
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS~
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR~
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.~

.modal-dialog#editModal
  .modal-content
    = form_for task, remote: true do |f|
      = f.hidden_field :assignable_type, value: 'Procedure'
      = f.hidden_field :assignable_id, value: procedure.id
      .modal-header
        %h4.modal-title
          = t('procedures.edit_header')
        %button.close{ type: 'button', value: '', data: { dismiss: 'modal' }, aria: { label: t('actions.close') } }
          %span{ aria: { hidden: 'true' } } &times;

      .modal-body
        .form-group
          .row.align-items-center
            = f.label 'assignee_id', t('task.assignee_name'), class: 'required control-label mb-0 col-sm-4'
            .col-sm-8
              = f.select :assignee_id, options_from_collection_for_select(clinical_providers.map(&:identity).sort_by!{ |i| i.last_name.downcase }.uniq, 'id', 'full_name'), { include_blank: true }, class: 'form-control selectpicker'
        .form-group
          .row.align-items-center
            = f.label 'follow_up_date', t('task.due_at'), class: 'required control-label mb-0 col-sm-4'
            .col-sm-8
              .input-group.datetimepicker.date{ id: 'dueAtDatePicker', data: { target_input: 'nearest' } }
                = f.text_field :due_at, class: 'datetimepicker-input form-control', data: { target: '#dueAtDatePicker' }
                .input-group-append{ data: { toggle: 'datetimepicker', target: '#dueAtDatePicker' } }
                  %span.input-group-text
                    = icon('fas', 'calendar-alt')
        .form-group
          .row.align-items-center
            = f.fields_for :notes, Note.new do |nf|
              = nf.hidden_field :notable_type, value: 'Procedure'
              = nf.hidden_field :notable_id, value: procedure.id
              = nf.hidden_field :kind, value: 'followup'

              = nf.label 'comment', t(:notes)[:comment], class: 'control-label mb-0 col-sm-4'
              .col-sm-8
                = nf.text_area :comment, { class: 'form-control', rows: '6' }
      .modal-footer
        %button.btn.btn-secondary{ type: 'button', data: { dismiss: 'modal' } }
          = t(:actions)[:close]
        = f.submit t('actions.submit'), class: 'btn btn-primary'
